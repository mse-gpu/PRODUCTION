<?xml version="1.0"?>

<!-- Autor : Cedric.Bilat@he-arc.ch -->
<!-- version: 0.2.2-->
	
<!-- ASSERTION : Doit etre appeler par une tache ant qui lui passe un fichier de type projetXXX.properties contenant les informations relatives au projet -->	
	
<project name="ProjetManager" default="projetBuild" basedir="." >

	<description>
		By Bilat Cedric
	</description>

	<!-- ************************** -->
	<!--  	Tache personalisee  	-->
	<!-- ************************** -->
	
	<taskdef name="Dirset_toStrings" classname="com.bilat.tools.addon.ant.Dirset_toStrings"/> 

	<!-- ************************** -->
	<!--  		Property			-->
	<!-- ************************** -->
	
	<property file="variables.properties"/>
	
	<!-- ***********************  -->
	<!--  	java6 classpath	      -->
	<!-- ************************ -->
	
	<!-- classpath new feature jvm 1.6 : wildcard * -->
	<!-- example1 : -classpath mydir/*   	: include all .jar in the directory mydir -->
	<!-- example2 : -classpath *   		: include all .jar in the current directory  -->
	
	<!-- ***********************  -->
	<!--  		 One projet 		      -->
	<!-- ************************ -->
		
	<target name="projetBuild" >
		<sequential>
			<antcall target="info" />
			<antcall target="cleanAll" /> 
			<antcall target="compil" /> 
			<antcall target="deploy" />
			<antcall target="runJunit" />
		</sequential>
	</target>
	
	<!-- <target name="deployTest" description="deploy puis run test">
			<sequential>
				<antcall target="deploy" />
				<antcall target="runJunit" />
			</sequential>
	</target> -->
	
	<target name="deploy" >
		<sequential>
			
			<sequential>
				<antcall target="makeJar" />
				<antcall target="deployerInput" />		
				<antcall target="makeDoc" />
				<antcall target="zipSource" />
			</sequential>
			
			<sequential>	
				<antcall target="runJarVersion" /> <!-- bloquant si parallel why? -->
				<antcall target="runDoc" /> 
			</sequential>	
			
		</sequential>
	</target>
	
	<target name="info">
		<echo message="Systeme properties :"/>
		<echo message="ant                : ${ant.version}"/>
		<echo message="basedir            : ${basedir}"/>
		<echo message="jvm                : ${ant.java.version}"/>
		<echo message=" "/>
		<echo message="User properties :"/>
		<echo message="projet.author             : ${projet.author}"/>
		<echo message="projet.organisation       : ${projet.organisation}"/>
		<echo message="projet.name               : ${projet.name}"/>
		<echo message="projet.args               : ${projet.args}"/>
		<echo message="projet.class.main         : ${projet.class.main}"/>
		<echo message="projet.class.version      : ${projet.class.version}"/>
		<echo message="projet.jvm.para           : ${projet.jvm.para}"/>
	</target>
	
	<!-- ***********************  -->
	<!--  		 compiler 	      -->
	<!-- ************************ -->

	<target name="compilByJar" >
		<description>
			Use .jar other project workspace
		</description>
		
		<path id="workspace.classpath.compil.byJar">
			<fileset dir="${workspace.deploy.jar.dir}" >
				<include name="*.jar"/>
				<exclude name="${projet.deploy.jar.name}"/>
			</fileset>
			<fileset dir="${workspace.deploy.jar.dir.ext}" >
				<include name="*.jar"/>
			</fileset>
		</path>
		
		<antcall target="cleanClass" />
		
		<sequential>
			<javac destdir="${projet.class.dir}" verbose="false" optimize="True" >
				<src path="${projet.src.dir}" />
				<classpath refid="workspace.classpath.compil.byJar" />
			</javac>
			<antcall target="copyRessource" />
			<antcall target="makeRunClassCmd" />
		</sequential>
	</target>

	<target name="compil" description="Use .class other project workspace " >
		<path id="workspace.classpath.compil.byClass">
			<dirset dir="${workspace.root.path}/." > 
				<include name="**/bin" />
			</dirset> 
			<fileset dir="${workspace.deploy.jar.dir.ext}">
				<include name="*.jar" />
			</fileset>
		</path>
		
		<antcall target="cleanClass" />
		
		<sequential>
			<javac destdir="${projet.class.dir}" verbose="false" optimize="True" >
				<src path="${projet.src.dir}" />
				<classpath refid="workspace.classpath.compil.byClass" />
			</javac>
			<antcall target="copyRessource" />
			<antcall target="makeRunClassCmd" />
		</sequential>
	</target>
	
	<target name="copyRessource" description="private">
		<copy todir="${projet.class.dir}/ressources" >
			<fileset dir="${projet.src.ressources.dir}" />
		</copy>
	</target>
	
	<!-- ***********************  -->
	<!--  		 jar 		      -->
	<!-- ************************ -->
	
	<target name="makeJar">
		<sequential>
			<antcall target="buildVersionData" />
			<antcall target="cleanJar" />
			
			<jar jarfile="${projet.deploy.jar.file}" compress="true" update="false">
			
				<fileset dir="${projet.class.dir}" > 
					
					<!-- todo : pas parfait folder empty reste -->
					<!-- Pas toujours agréable d'enlever test
					<exclude name="run.bat"/>
					<exclude name="**/*${workspace.test.class.suffixe}.class"/>
					
					<exclude name="**/test*/**/*.class"/> 
					<exclude name="**/test/**/*.class"/> 
					<exclude name="**/tests/**/*.class"/> 
					<exclude name="**/junit/**/*.class"/> 
				
					<exclude name="**/test*"/> 
					<exclude name="**/test"/> 
					<exclude name="**/tests"/> 
					<exclude name="**/junit"/> 
					-->
				</fileset>
			
				<manifest>
		     	   <attribute name="Built-By" value="${projet.author}"/>
					<attribute name="Sealed" value="false"/>
					<attribute name="Main-Class" value="${projet.class.version}"/>
		      		<attribute name="Class-Path" value=". * ./ext/* ./ext/BilatTools.jar BilatTools.jar"/>
					<!-- wildcard classptah not honorated in header manifest (jvm 1.6) . solution: put BilatTools.jar" -->
		   		 </manifest>
			</jar>
			
			<antcall target="makeRunJarCmd" />
		</sequential>
	</target>
	
	<target name="makeJarRunVersion" description="Eclipse usefull" >
		<antcall target="makeJar" />
		<antcall target="runJarVersion" />	
	</target>
	
	<!-- ***********************  -->
	<!--  		 doc 	      	-->
	<!-- ************************ -->
	
	<target name="makeDoc">
		<tstamp>
			<format property="year" pattern="yyyy" />
		</tstamp>
		<tstamp>
			<format property="year4" pattern="yyyy" offset="4" unit="year"/>
		</tstamp>
		<property name="dateCopyright" value="${year}-${year4}" />
		
		<antcall target="cleanDoc" />
		
		<!-- copy image doc -->
		<mkdir dir="${projet.deploy.docImages.dir}" />
		<copy todir="${projet.deploy.docImages.dir}" >
			<fileset dir="${projet.src.docImages.dir}" />
		</copy>

		<!-- useexternalfile  because input of javadoc is limit to 127 characters long -->
		<javadoc  destdir="${projet.deploy.doc.dir}" private="false"   windowtitle="${projet.name} ${projet.author}" splitindex="true" author="true" version="true" useexternalfile="true">
			
			<fileset dir="${projet.src.dir}" >
				 <include name="**/*.java"/> 
				 <exclude name="**/*${workspace.test.class.suffixe}.java"/>
				 <exclude name="ressources**"/> 
				 <exclude name="**/*.auml"/> <!-- model uml -->
			     
				 <exclude name="**/test/**/*.java"/>
				 <exclude name="**/tests/**/*.java"/>
				 <exclude name="**/junit/**/*.java"/> 
			</fileset>

			<!-- marche plus avec option  useexternalfile="true"
			<bottom> 
				<![CDATA[<br><img src={@docRoot}/${projet.doc.imageCopyright} >
				<br> <a href=${projet.doc.link.homePage}> www.he-arc.ch </a>
				<br><br><b> Copyright ${dateCopyright} &copy : ${projet.author} , ${projet.organisation}</b>]]>
			</bottom>	
			
			<doctitle>
				<![CDATA[<b>${projet.name} JavaDoc API</b>]]>
			</doctitle>
		 -->
			
		</javadoc>
		
		<antcall target="zipDoc" />	
		
	</target>

	<target name="makeDocRunDoc" description="Eclipse usefull">
		<antcall target="makeDoc" />		
		<antcall target="runDoc" />				
	</target>
	
	<!-- ***********************  -->
	<!--  	makeVersionData	      -->
	<!-- ************************ -->
	
	<!-- utile pour objet Version de BilatTools de java , pas nécessaire pour ant . Version récupère en lecture ces données-->
	<target name="buildVersionData" description="private">
	
		<property name="buildNumberFile" value="${projet.src.dir}/ressources/private/ant/${projet.name}_buildVersionNumber.properties" />
		<property name="projetVersionFile" value="${projet.src.dir}/ressources/private/ant/${projet.name}_version.properties" />

		<buildnumber file="${buildNumberFile}"/>
		<!-- fabrique la va build.number par pasring et incrementation du champ build.number stocké dans le file cité ci-dessus -->
		<echo message="build.number : ${build.number}"/>
		
		<tstamp >
			<format property="build.Date" pattern="dd/MM/yyyy hh:mm" />
			<format property="build.Annee" pattern="yyyy" />
		</tstamp>
		<copy file="templateVersion.properties" toFile="${projetVersionFile}" overwrite="true"> 
			<filterset >
				<filter token="date" value="${build.Date}" />
			</filterset >
			<filterset >
				<filter token="annee" value="${build.Annee}" />
			</filterset >
			<filterset >
				<filter token="number" value=" ${build.number}" /> <!-- build.number of file buildVersionNumber.properties -->
			</filterset >
		</copy>
		
		<!-- versionData se trouve dans src, il faut le copier dans bin , le folder jarrer -->
		<copy file="${projetVersionFile}" todir="${projet.class.dir}/ressources/private/ant" overwrite="true" />
	
	</target>
		
	<!-- ***********************  -->
	<!--  		 jUnit  		  -->
	<!-- ************************ -->
	
	<path id="classPathJunit" >
		<pathelement location="${projet.class.dir}" />	
		
		<fileset dir="${workspace.deploy.jar.dir.ext}" >
			<include name="*.jar" />
		</fileset>
		<fileset dir="${workspace.deploy.jar.dir}" >
			<include name="*.jar" />
		</fileset>
		<!-- trop lent
		<dirset dir="${workspace.root.path}/." > 
			<include name="**/bin" />
		</dirset> -->	
	</path>
	
	<target name="runJunit" description="eclpise useufull : xml html browser : use jar of other project"> 
		<antcall target="runJunitXml" /> 
		<antcall target="runJunitXmlToHtml" /> 
		<antcall target="runJunitReport" />
	</target>
	
	<target name="runJunitXml" description="private">
		
		<antcall target="cleanJunitReport" /> 
		<mkdir dir="${projet.report.junit.dir}/xml"/>
		<mkdir dir="${projet.report.junit.dir}/temp"/>
  
		<!-- Effectue les tests et fabrique un rapport .xml des résultats -->
		<junit fork="yes" haltonfailure="no" printsummary="no" maxmemory="1400m" dir="${projet.path}" tempdir="${projet.report.junit.dir}/temp">
			
			<!-- <jvmarg value="-Djava.library.path=../PRODUCTION/Deploy/bin/dll"> -->
			<classpath refid="classPathJunit" /> 
			
			<formatter type="xml"  />
			
			<batchtest fork="yes"   todir="${projet.report.junit.dir}/xml"> 
				 <fileset dir="${projet.class.dir}"> 
				  	<include name="**/*${workspace.test.class.suffixe}.class" />
				  </fileset>
			</batchtest>
			
		</junit>
		
		<delete dir="${projet.report.junit.dir}/temp" includeemptydirs="true"/> 
	</target>
		
	<target name="runJunitXmlToHtml" description="private">
		<!-- convertit en html le rapport xml fabriqué ci-dessus -->
		<junitreport todir="${projet.report.junit.dir}/xml">
			<fileset dir="${projet.report.junit.dir}/xml">
				<include name="TEST-*.xml" />
			</fileset>
			<report  format="frames" todir="${projet.report.junit.dir}/html" />
		</junitreport> 
	</target>

	<!-- ***********************  -->
	<!--  		 deployer 		  -->
	<!-- ************************ -->
	
	<target name="deployerInput" >
		<parallel>
			<copy todir="${workspace.deploy.input.dir}" >
				<fileset dir="${projet.input.dir}" />
			</copy>
			<copy todir="${workspace.deploy.persistance.dir}" >
				<fileset dir="${projet.persistance.dir}" />
			</copy>
		</parallel>
	</target>
	
	<!-- ***********************  -->
	<!--  		 zip	 		  -->
	<!-- ************************ -->

	<target name="zipSource">
		<antcall target="cleanZipSource" />
		<zip basedir="${projet.src.dir}" destfile="${projet.deploy.srcZip.file}" compress="true" update="false" />
	</target>
	
	
	 <target name="zipDoc">
	 	<antcall target="cleanZipDoc" />
		<zip basedir="${projet.deploy.doc.dir}" destfile="${projet.deploy.docZip.file}" compress="true" update="false" />
	</target>
	
	<!-- ***********************  -->
	<!--  		 makeRun	      -->
	<!-- ************************ -->
	
	<target name="makeRunClassCmd"> <!-- os windows : .cmd-->
		
		<path id="dirset.classpath.run.bin">
			<dirset  dir="${workspace.root.path}" >
				<include name="**/bin"/>
			</dirset>
		</path>
	
		<Dirset_toStrings nameDirset="dirset.classpath.run.bin" nameProperty="workspace.classpathRunClassCmd" prefixe="..\" separator=";"/> 
		
		<property name="workspace.classpathRunClassCmd.total" value="${workspace.classpathRunClassCmd};*;.;../PRODUCTION/Deploy/bin/ext/*"  /> 
		<property name="commandeRunClassCmd" value="java -classpath ${workspace.classpathRunClassCmd.total}  ${projet.jvm.para} -Djava.library.path=../Production/Deploy/bin/dll  ${projet.class.main} ${projet.args}" />
		<echo message="${commandeRunClassCmd}" />

		<copy file="templateRunClassCmd" toFile="${projet.deploy.classRun.file}" overwrite="true">
			<filterset >
				<filter token="dir" value="cd ../" />
				<filter token="commande" value="${commandeRunClassCmd}" />
			</filterset >
		</copy>
	</target>
	
	<property name="argRunJar" value="${projet.jvm.para} -Djava.library.path=./dll -classpath ${projet.deploy.jar.name};*;.;./ext/*  ${projet.class.main} ${projet.args}" />
		
	<target name="makeRunJarCmd">  <!-- os windows : .cmd-->	
		<property name="commandeRunJar" value="java ${argRunJar}" />
		<echo message="${commandeRunJar}" />
		
		<copy file="templateRunJarCmd" toFile="${projet.deploy.jarRun.file}" overwrite="true">
			<filterset >
				<filter token="commande" value="${commandeRunJar}" />
			</filterset >
		</copy>
	</target>
	
	<!-- ***********************  -->
	<!--  		 run	 		  -->
	<!-- ************************ -->

	<target name="runClass">
		<path id="workspace.classpathRunClass">
			<dirset dir="${workspace.root.path}/." > 
				<include name="**/bin" />
			</dirset> 
			<fileset dir="${workspace.deploy.jar.dir.ext}">
				<include name="*.jar" />
			</fileset>
		</path>
		
		<java classname="${projet.class.main}"  fork="true" jvmversion="${projet.jvm.version}" dir="${projet.path}"  >
			<!-- dir : to recuperer le chemein correct pour les paths de inputs, outputs, data,.. -->
			<classpath refid="workspace.classpathRunClass" />
			<jvmarg line="${projet.jvm.para} -Djava.library.path=../Production/Deploy/bin/dll"/>
			<arg line="${projet.args}"/>
		</java>
	</target>

	<target name="runJar">
		<exec executable="java"  dir="${workspace.deploy.jar.dir}">
			<arg line="${argRunJar}" /> 
		</exec>									
		<!--<java  classpath="${bin} ${class.version}" fork="True" jvmversion="${jvm.version}" spawn="true"/> marche pas -->
	</target>

	<target name="runJarVersion" >
		<java  jar="${workspace.deploy.jar.dir}/${projet.name}.jar"  dir="${workspace.deploy.jar.dir}" fork="true" spawn="true"/> 
		<!-- spawn="true" est non bloquant, mais n'indique pas d'erreur -->
		<!-- <exec executable="java"  dir="${workspace.deploy.jar.dir}" spawn="true"> 
			<arg line="-jar ${projet.name}.jar " /> -->
		<!-- </exec> -->
	</target>
	
	<target name="runClassVersion" >
		<!-- spawn="true" est non bloquant, mais n'indique pas d'erreur -->
		<exec executable="java"  dir="${projet.class.dir}" spawn="true"> 
			<arg line="-cp .;${workspace.deploy.jar.dir.ext}/* ${projet.class.version}" /> 
			<!-- attention: cp : fisrt classPath courant pour attraper le bon numero de version dans JVersion -->
		</exec>
	</target>
	
	<!-- ***********************  -->
	<!--  		 HTML 		  -->
	<!-- ************************ -->
	
	<!-- timeout : pour ne pas être bloquant -->
	
	<target name="runDoc">
		<exec executable="${projet.deploy.doc.dir}/index.html" vmlauncher="false" timeout="2000"/>
	</target>
	
	<target name="runJunitReport">
		<exec executable="${projet.report.junit.dir}/html/index.html" vmlauncher="false" timeout="2000"/>
	</target>
	
	<!-- ***********************  -->
	<!--  		 Consolider 	 -->
	<!-- ************************ -->
	
	<!-- call by workspace -->
	
	<target name="zipSourceWorkspace" description="private : use by workspaceManager : consolider strategie">
		<!-- attention : update="true" -->
		<zip basedir="${projet.src.dir}" destfile="${workspace.deploy.file.src.zip.name}" compress="true" update="true" />
	</target>
		
	<target name="copyIoTestsConsolider" description="private : use by workspaceManager : consolider strategie">
		<copy todir="${workspace.deploy.consolider.class.temp.dir}/ioTests/inputs" >
			<fileset dir="${projet.inputTest.dir}" />
		</copy>
		<copy todir="${workspace.deploy.consolider.class.temp.dir}/ioTests/persistances" >
			<fileset dir="${projet.persistanceTest.dir}" />
		</copy>
	</target>
		
	<!-- ***********************  -->
		<!--  		 clean 		      -->
		<!-- ************************ -->
		
		<target name="cleanAll" description="clean class  + cleanAllDeploy "> 
			<parallel>
				<antcall target="cleanClass" />
				<antcall target="cleanAllDeploy" />
			</parallel>	
		</target>
		
		<target name="cleanAllDeploy" description="deleted not class, but deploy" > 
			<parallel>
				<antcall target="cleanJar" />
				<antcall target="cleanDoc" />
				<antcall target="cleanZipDoc" />
				<antcall target="cleanZipSource" />	
				<antcall target="cleanJunitReport" />
				<antcall target="cleanio" />
			</parallel>	
		</target>
		
		<target name="cleanClass" description="private"> 
			<delete includeemptydirs="true">
			    <fileset dir="${projet.class.dir}" includes="**/*"/> 
			</delete>
		</target>
		
		<target name="cleanJar" description="private"> 
			<delete file="${projet.deploy.jar.file}"/>
			<delete file="${projet.deploy.jarRun.file}"/>
		</target>
		
		<target name="cleanDoc" description="private"> 
			<parallel>
				<delete dir="${projet.deploy.doc.dir}"/>	
				<antcall target="cleanZipDoc" /> 
			</parallel>
		</target>
		
		<target name="cleanZipDoc" description="private"> 
			<delete file="${projet.deploy.docZip.file}"/>
		</target>
		
		<target name="cleanZipSource" description="private"> 
			<delete file="${projet.deploy.srcZip.file}"/>
		</target>
		
		<target name="cleanJunitReport" description="private"> 
			<delete  includeemptydirs="true">
					<fileset dir="${projet.report.junit.dir}" includes="**/*" />
			</delete>
		</target>
		
		<target name="cleanio" description="private"> 
			<parallel>
				<delete includeemptydirs="true">
					<fileset dir="${workspace.deploy.input.dir}" includes="**/*"/>
				</delete>
				<delete includeemptydirs="true">
					<fileset dir="${workspace.deploy.output.dir}" includes="**/*" />
				</delete>
				<delete includeemptydirs="true"> 
					<fileset dir="${workspace.deploy.persistance.dir}" includes="**/*" />
				</delete>
			</parallel>
		</target>
		
		<target name="cleanAUML" description="private : diagrame uml : DANGER!"> 
			<delete>
				<fileset dir="${projet.src.dir}" includes="**/*.auml"/>
			</delete>
		</target>
	
</project>
